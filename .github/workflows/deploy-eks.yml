name: Deploy to EKS

on:

  push:
    branches: [ main ]

env:
  ECR_REPOSITORY: lanchonete-api
  EKS_CLUSTER_NAME: my-eks-cluster
  AWS_REGION: us-east-1

jobs:

  build:

    name: Deployment
    runs-on: ubuntu-latest

    steps:

      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  ./
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Get parameters
        uses: dkershner6/aws-ssm-getparameters-action@v2
        with:
          parameterPairs: "/lambda-auth/lambdaUrl = LAMBDA_URL"
          #"/database/user = POSTGRES_USER,
          #/database/password = POSTGRES_PASSWORD,
          #/database/host = POSTGRES_HOST,
          # The part before equals is the ssm parameterName, and after is the ENV Variable name for the workflow.
          # No limit on number of parameters. You can put new lines and spaces in as desired, they get trimmed out.

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml && \
          kubectl apply -f k8s/postgre && \
          kubectl apply -f k8s/lanchonete